# Testing framework for IFJ 2020 projects

"""
CONFIGURATION FILE
"""

# Error constants for compiler
ERR_COMP_OK = 0
ERR_COMP_LEX = 1
ERR_COMP_SYN = 2
ERR_COMP_SEM_DEF = 3
ERR_COMP_SEM_NEWVAR = 4
ERR_COMP_SEM_TYPE = 5
ERR_COMP_SEM_FUNC = 6
ERR_COMP_SEM_OTHER = 7
ERR_COMP_SEM_ZERODIV = 9
# Error constants for interpreter
ERR_INT_OK = 0
ERR_INT_ANALYZE = 51
ERR_INT_SEM = 52
ERR_INT_RUN_OPER = 53
ERR_INT_RUN_VAR = 54
ERR_INT_RUN_FRAME = 55
ERR_INT_RUN_NOVAL = 56
ERR_INT_RUN_BADVAL = 57
ERR_INT_RUN_STRING = 58
# Compilation modes
MODE_FULL = 0
MODE_INTERPRET = 1
MODE_COMPILE = 2
# Extentions
EXTEND_BOOLTHEN = 0
EXTEND_BASE = 1
EXTEND_FUNEXP = 2
EXTEND_MULTIVAL = 3
EXTEND_UNARY = 4
EXTEND_ALL = [EXTEND_BOOTHEN, EXTEND_BASE, EXTEND_FUNEXP, EXTEND_MULTIVAL, EXTEND_UNARY]
EXTEND_NONE = []

###
### !!! MUST CONFIGURE !!!
###

# Path to IFJ20 compiler executable file (the executable generated by your make command)
IFJCOMP_EXECUTABLE = "../IFJ/IFJ"
# Selected testing mode
	# MODE_FULL - compilation, interpretation, check with native python
	# MODE_INTERPRET - compilation, interpretation
	# MODE_COMPILE - compilation
TESTING_MODE = MODE_FULL
# List of implemented extentions in the project
    # Subset of [EXTEND_BOOTHEN, EXTEND_BASE, EXTEND_FUNEXP, EXTEND_MULTIVAL, EXTEND_UNARY]
IMPLEMENTED_EXTENTIONS = EXTEND_NONE

###
### MAY CONFIGURE
###

# Path to template file to enable IFJ19 code to be run by python
IFJ_20_TEMPLATE_FILE ="./ifj20.go"
# Path to temporaly file to store compiler output 
TMP_FILE = "./tmp_file"
# Go interpreter for output comparison
GO_INTERPRETER = "go"
# Path to ic20 interpreter
ICL_INTERPRETTER = "./ic20int"
# Path to folder for incorrect outputs from IFJ 19 compiler
OUTPUT_FOLDER = "./outputs"
# Folder with test source files
TESTS_FOLDER = "./tests"
# Timeout for each test to cmplete
SINGLE_TEST_TIMEOUT = 5

###
### Tests
###

# (source_file, [compiler_exit_codes], [interpret_exit_codes], [extentions_must], [extentions_cant], program_input)
tests = [
    # TODO
]
