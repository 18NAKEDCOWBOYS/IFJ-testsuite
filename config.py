# Testing framework for IFJ 2019 projects

"""
CONFIGURATION FILE
"""

# Error constants for compiler
ERR_COMP_OK = 0
ERR_COMP_LEX = 1
ERR_COMP_SYN = 2
ERR_COMP_SEM_DEF = 3
ERR_COMP_SEM_TYPE = 4
ERR_COMP_SEM_PAR = 5
ERR_COMP_SEM_OTHER = 6
ERR_COMP_SEM_ZERODIV = 9
# Error constants for interpreter
ERR_INT_OK = 0
ERR_INT_PARAM = 50
ERR_INT_ANALYZE = 51
ERR_INT_SEM = 52
ERR_INT_RUN_OPER = 53
ERR_INT_RUN_VAR = 54
ERR_INT_RUN_FRAME = 55
ERR_INT_RUN_NOVAL = 56
ERR_INT_RUN_BADVAL = 57
ERR_INT_RUN_STRING = 58
# Compilation modes
MODE_FULL = 0
MODE_INTERPRET = 1
MODE_COMPILE = 2
# Extentions
EXTEND_BOOLOOP = 0
EXTEND_BASE = 1
EXTEND_CYCLES = 2
EXTEND_FUNEXP = 3
EXTEND_IFTHEN = 4
EXTEND_ALL = [EXTEND_BOOLOOP, EXTEND_BASE, EXTEND_CYCLES, EXTEND_FUNEXP, EXTEND_IFTHEN]
EXTEND_NONE = []

###
### !!! MUST CONFIGURE !!!
###

# Path to IFJ19 compiler executable file (the executable generated by your make command)
IFJCOMP_EXECUTABLE = "../IFJ/IFJ"
# Selected testing mode
	# MODE_FULL - compilation, interpretation, check with native python
	# MODE_INTERPRET - compilation, interpretation
	# MODE_COMPILE - compilation
TESTING_MODE = MODE_FULL
# List of implemented extentions in the project
IMPLEMENTED_EXTENTIONS = EXTEND_NONE

###
### MAY CONFIGURE
###

# Path to template file to enable IFJ19 code to be run by python
IFJ_19_TEMPLATE_FILE ="./ifj19.py"
# Path to temporaly file to store compiler output 
TMP_FILE = "./tmp_file"
# Python interpreter for output comparison
PYTHON_INTERPRETER = "python3"
# Path to ic19 interpreter
ICL_INTERPRETTER = "./ic19int"
# Path to folder for incorrect outputs from IFJ 19 compiler
OUTPUT_FOLDER = "./outputs"
# Folder with test source files
TESTS_FOLDER = "./tests"
# Timeout for each test to cmplete
SINGLE_TEST_TIMEOUT = 10

###
### Tests
###

# (source_file, compiler_exit_code,    interpret_exit_code,    [extentions_must], [extentions_cant], program_input)
# (source_file, [compiler_exit_codes], [interpret_exit_codes], [extentions_must], [extentions_cant], program_input)
tests = [
    # Basic tests from assignmnet
    ("factorial.py",  ERR_COMP_OK, ERR_INT_OK, "5",                  EXTEND_NONE, EXTEND_NONE),
    ("factorial.py",  ERR_COMP_OK, ERR_INT_OK, "2",                  EXTEND_NONE, EXTEND_NONE),
    ("factorial2.py", ERR_COMP_OK, ERR_INT_OK, "5",                  EXTEND_NONE, EXTEND_NONE),
    ("factorial2.py", ERR_COMP_OK, ERR_INT_OK, "2",                  EXTEND_NONE, EXTEND_NONE),
    ("buildin.py",    ERR_COMP_OK, ERR_INT_OK, "abcedfgh\nabcdefgh", EXTEND_NONE, EXTEND_NONE),
    ("buildin.py",    ERR_COMP_OK, ERR_INT_OK, "abcdefgh",           EXTEND_NONE, EXTEND_NONE),
    ("factorial.py",  [ERR_COMP_OK, ERR_COMP_SEM_TYPE], ERR_COMP_SEM_TYPE, "a",  EXTEND_NONE, EXTEND_NONE),
    ("factorial.py",  [ERR_COMP_OK, ERR_COMP_SEM_TYPE], ERR_COMP_SEM_TYPE, None, EXTEND_NONE, EXTEND_NONE),
    ("factorial2.py", [ERR_COMP_OK, ERR_COMP_SEM_TYPE], ERR_COMP_SEM_TYPE, "a",  EXTEND_NONE, EXTEND_NONE),
    ("factorial2.py", [ERR_COMP_OK, ERR_COMP_SEM_TYPE], ERR_COMP_SEM_TYPE, None, EXTEND_NONE, EXTEND_NONE),

    # Lexical analysis tests
    ("badcomment.py",    ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("baddot.py",        ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badchars.py",      ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcomment2.py",   ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexponent.py",   ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badindent.py",     ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badindent2.py",    ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badstring.py",     ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("emptyexponent.py", ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("morezeroes.py",    ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("nonasci.py",       ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction5.py",  ERR_COMP_LEX, None, None, EXTEND_NONE, EXTEND_NONE),

    # Syntax analysis tests
    ("badfunction.py",  ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction2.py", ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction3.py", ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction4.py", ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction7.py", ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badindent3.py",   ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badwhile.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badwhile2.py",    ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badwhile3.py",    ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badif.py",        ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badif2.py",       ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badif3.py",       ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcall.py",      ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcall2.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcall3.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexpr.py",      ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexpr2.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexpr3.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexpr4.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badexpr5.py",     ERR_COMP_SYN, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badreturn.py",    ERR_COMP_SYN, None, None, EXTEND_NONE, [EXTEND_FUNEXP]),

    # Semantics analysis tests
    ("badvar3.py",       ERR_COMP_SEM_DEF, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction8.py",  ERR_COMP_SEM_DEF, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction9.py",  ERR_COMP_SEM_DEF, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction10.py", ERR_COMP_SEM_DEF, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcall4.py",      ERR_COMP_SEM_DEF, None, None, EXTEND_NONE, EXTEND_NONE),
    ("badcall5.py",      ERR_COMP_SEM_PAR, None, None, EXTEND_NONE, EXTEND_NONE),

    # Interpret error tests
    ("badtype.py",       [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype2.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype3.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype4.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype5.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype6.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype7.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype8.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("badtype9.py",      [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],      None, EXTEND_NONE, EXTEND_NONE),
    ("zerodiv.py",       [ERR_COMP_OK, ERR_COMP_SEM_ZERODIV], [ERR_INT_RUN_BADVAL, ERR_COMP_SEM_ZERODIV], None, EXTEND_NONE, EXTEND_NONE),
    ("zerodiv2.py",      [ERR_COMP_OK, ERR_COMP_SEM_ZERODIV], [ERR_INT_RUN_BADVAL, ERR_COMP_SEM_ZERODIV], None, EXTEND_NONE, EXTEND_NONE),
    ("badvar.py",        [ERR_COMP_OK, ERR_COMP_SEM_TYPE],    [ERR_INT_RUN_NOVAL, ERR_COMP_SEM_TYPE],     None, EXTEND_NONE, EXTEND_NONE),
    ("badfunction6.py",  [ERR_COMP_SYN, ERR_COMP_SEM_DEF], None, None, EXTEND_NONE, EXTEND_NONE),
    ("badvar2.py",       ERR_COMP_SEM_DEF,                 None, None, EXTEND_NONE, EXTEND_NONE),

    # Buildin functions tests
    ("badbuildin.py",  ERR_COMP_OK, ERR_INT_RUN_OPER,   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin2.py", ERR_COMP_OK, ERR_INT_RUN_OPER,   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin3.py", ERR_COMP_OK, ERR_INT_RUN_OPER,   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin6.py", ERR_COMP_OK, ERR_INT_RUN_OPER,   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin7.py", ERR_COMP_OK, ERR_INT_RUN_OPER,   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin8.py", ERR_COMP_OK, ERR_INT_RUN_STRING, None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin4.py", ERR_COMP_OK, [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],   None, EXTEND_NONE, EXTEND_NONE),
    ("badbuildin5.py", ERR_COMP_OK, [ERR_INT_RUN_OPER, ERR_COMP_SEM_TYPE],   None, EXTEND_NONE, EXTEND_NONE),

    # Correct programs
    ("emptyprogram.py", ERR_COMP_OK, ERR_INT_OK, None,    EXTEND_NONE, EXTEND_NONE),
    ("specstring.py",   ERR_COMP_OK, ERR_INT_OK, None,    EXTEND_NONE, EXTEND_NONE),
    ("lotofparams.py",  ERR_COMP_OK, ERR_INT_OK, None,    EXTEND_NONE, EXTEND_NONE),
    ("longidentif.py",  ERR_COMP_OK, ERR_INT_OK, None,    EXTEND_NONE, EXTEND_NONE),
    ("geometry.py",     ERR_COMP_OK, ERR_INT_OK, "abc\n", EXTEND_NONE, EXTEND_NONE),
    ("geometry.py",     ERR_COMP_OK, ERR_INT_OK, "square\n5\nrectangle\n5.4\n10.4\n\n", EXTEND_NONE, EXTEND_NONE),
    ("geometry.py",     ERR_COMP_OK, ERR_INT_OK, "circle\n4.7\ntriangle\n1.1\n2.2\n2.2\n2.8\nsquare\n0\n\n", EXTEND_NONE, EXTEND_NONE)
]
